/*
 * Copyright 2010 Red Hat, Inc. and/or its affiliates.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package solver;

dialect "java"

import org.optaplanner.core.api.score.buildin.bendable.BendableScoreHolder;
import domain.Task;
import domain.TaskPart;
import domain.Employee;
import java.util.List;

global BendableScoreHolder scoreHolder;

// ############################################################################
// Hard constraints
// ############################################################################

rule "Skill requirements"
    when
        TaskPart(employee != null, missingSkillCount > 0, $missingSkillCount : missingSkillCount)
    then
        scoreHolder.addHardConstraintMatch(kcontext, 0, - $missingSkillCount);
end

rule "High priority task must be accomplished on time"
    when
        TaskPart(employee != null, task.priority == 1, $outOfTime : outOfTime)
    then
        scoreHolder.addHardConstraintMatch(kcontext, 0, $outOfTime);
end

// ############################################################################
// Soft constraints level 0 - near 0
// ############################################################################

rule "Meet complention time for other priorities"
when
        TaskPart(employee != null, $priority : task.priority  > 1 , $outOfTime : outOfTime)
    then
        scoreHolder.addSoftConstraintMatch(kcontext, 0, $outOfTime );
end

rule "Same employee - Keep parts together"
    when
    	$tp : TaskPart (task.maxParts > 1, $e : employee, $t : task)
    	$parts : List() from collect ( TaskPart ( task == $t ) )
        exists TaskPart ( employee == $e, 
        			     task == $t,
                         previousTaskPartOrEmployee not memberOf $parts,
                         nextTaskPart not memberOf $parts )
    then
       	scoreHolder.addSoftConstraintMatch(kcontext, 0, -1 );
end

rule "Same employee - Avoid gaps between parts"
    when
    	$tp : TaskPart (task.maxParts > 1, $t : task, $startTime : startTime)
        $otp : TaskPart ( task == $t, nextTaskPart == $tp, endTime != $startTime )
    then
       	scoreHolder.addSoftConstraintMatch(kcontext, 0, -1 );
end

// ############################################################################
// Soft constraints level 1
// ############################################################################

rule "Different employees - Keep parts aligned"
    when
        $tp1 : TaskPart($e1 : employee != null, $task: task, $startTime: startTime)
        $tp2 : TaskPart($e2 : employee != null, $e2 != $e1, task==$task, startTime != $startTime)
    then
        scoreHolder.addSoftConstraintMatch(kcontext, 1, -$tp1.offSet($tp2));
end

rule "Prefer assigning all parts to same employee"
    when
        $tp1 : TaskPart($e1 : employee != null, $task: task)
        $tp2 : TaskPart($e2 : employee != null, $e2 != $e1, task==$task)
    then
        scoreHolder.addSoftConstraintMatch(kcontext, 1, -1);
end

rule "Minimize the number of employees"
    when
        TaskPart ( $e1 : employee != null )
        TaskPart ( $e2 : employee != null , $e1 != $e2)
    then
        scoreHolder.addSoftConstraintMatch(kcontext, 1, -1);
end

// ############################################################################
// Soft constraints level 2
// ############################################################################

rule "Priority order (max priority is 6)"
    when
        TaskPart(employee != null, $priority : task.priority , $order : order)
    then
    	// the following formula works for chain of task <= 10 
    	// Over that there could be corner case where order is not respected
    	int priorityFactor = (int) Math.pow(10, (6-$priority)) * $order;
        scoreHolder.addSoftConstraintMatch(kcontext, 2, -priorityFactor );
end


