/*
 * Copyright 2010 Red Hat, Inc. and/or its affiliates.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package solver;

dialect "java"

import org.optaplanner.core.api.score.buildin.bendable.BendableScoreHolder;

import domain.Task;
import domain.TaskPart;
import domain.Employee;
import domain.Skill;

import java.util.List;
import java.util.ArrayList
import java.time.LocalTime;
import java.time.temporal.ChronoUnit;

global BendableScoreHolder scoreHolder;

// ############################################################################
// Hard constraints level 0 - near 0
// ############################################################################



rule "Gwendal - Skill requirements "
	when
		//If there is an assigned taskPart
		TaskPart(employee != null, $partEmployee : employee, $skill : task.requiredSkill)
		//If there is an employee assigned to this taskPart that hasn't the required skill to do the taskPart
		//TODO : Check if we can get en "Employee" object in this context. The rules is accepted at compilation time though
		Employee($employee : employee, $partEmployee == $employee, $employee.skillSet not contains $skill) 
	then
		//Then we strongly lower the hard constrains score
		scoreHolder.addHardConstraintMatch(kcontext, 0, -1);
end





//TODO : It is a good practice to indicate how the solution is from the perfect score, so the solver can see an improvement in the solutions

// ############################################################################
// Hard constraints level 1 - near 0
// ############################################################################


//It is less important to finish late
rule "High priority task must be accomplished on time"
    when
        TaskPart(employee != null, task.priority == 1, $outOfTime : outOfTime)
    then
        scoreHolder.addHardConstraintMatch(kcontext, 0, $outOfTime);
end


// ############################################################################
// Hard constraints level 2 - near 0
// ############################################################################

// ############################################################################
// Soft constraints level 0 - near 0
// ############################################################################

rule "Gwendal - Tasks should be finished before the end of the day"
    when

        TaskPart(employee != null, $readyTime : readyTime, $readyTime.isAfter(LocalTime.parse("14:00")))
        //TODO faire un calcul du dépassement d'heure pour l'utiliser dans le score 
    then
        int  outOfTime = (int) ChronoUnit.MINUTES.between($readyTime, LocalTime.parse("14:00"));
        scoreHolder.addSoftConstraintMatch(kcontext, 0, outOfTime);
end

rule "Priority order (max priority is 6)"
    when
        TaskPart(employee != null, $priority : task.priority , $order : order)
    then
    	// the following formula works for chain of task <= 10 
    	// Over that there could be corner case where order is not respected
    	int priorityFactor = (int) Math.pow(10, (6-$priority)) * $order;
        scoreHolder.addSoftConstraintMatch(kcontext, 0, -priorityFactor );
end


////////////////////////////////////
// TODO mélanger les 2 rules pour qu'on fixe un scor en fonction de la priorité et du dépassement : outOfTime / $priority (plus la priorité est grande, moins c'est grave si on dépasse)
////////////////////////////////////


rule "Meet completion time for other priorities"
when
        TaskPart(employee != null, $priority : task.priority  > 1 , $outOfTime : outOfTime)
    then
        scoreHolder.addSoftConstraintMatch(kcontext, 0, $outOfTime );
end

rule "Gwendal - Other priority tasks must be accomplished on time"
    when

        TaskPart(employee != null, $priority : task.priority,  task.priority != 1, $readyTime : readyTime, $readyTime.isAfter(LocalTime.parse("14:00")))
    then
        scoreHolder.addSoftConstraintMatch(kcontext, 0, - (6 - $priority));
end




rule "Same employee - Keep parts together"
    when
    	$tp : TaskPart (task.maxParts > 1, $e : employee, $t : task)
    	$parts : List() from collect ( TaskPart ( task == $t ) )
        exists TaskPart ( employee == $e, 
        			     task == $t,
                         previousTaskPartOrEmployee not memberOf $parts,
                         nextTaskPart not memberOf $parts )
    then
       	scoreHolder.addSoftConstraintMatch(kcontext, 0, -1 );
end



rule "Same employee - Avoid gaps between parts of a task"
    when
    	$tp : TaskPart (task.maxParts > 1, $t : task, $startTime : startTime)
        $otp : TaskPart ( task == $t, nextTaskPart == $tp, readyTime != $startTime )
    then
       	scoreHolder.addSoftConstraintMatch(kcontext, 0, -1 );
end



//A ne mettre en place que pour le 2e tir de perf, car c'est une contrainte plus complexe, permettra de voir les changements
/*rule "Gwendal - Assign first tasks to employees with the higher priorities"
	when
		//If there is an assigned taskPart
		TaskPart(employee != null, $partEmployee : employee, $skill : task.requiredSkill)
		//The higher the priority property for the task required skill is, the more we lower the score
		
		$employeeSkills : ArrayList (size == 1)
							from collect ( Skill(category == $skill.category)
								from $partEmployee.skillSet)
		
	then
	
		// 1 is the "higher" priority value we can have, no penality for this case
		// The penality starts at a priority value of 2
		 scoreHolder.addSoftConstraintMatch(kcontext, 0, 1 - ((Skill)$employeeSkills.get(0)).getPriority() );
		
end*/




// ############################################################################
// Soft constraints level 1
// ############################################################################

rule "Different employees - Keep parts aligned"
    when
        $tp1 : TaskPart($e1 : employee != null, $task: task, $startTime: startTime)
        $tp2 : TaskPart($e2 : employee != null, $e2 != $e1, task==$task, startTime != $startTime)
    then
        scoreHolder.addSoftConstraintMatch(kcontext, 1, -$tp1.offSet($tp2));
end

rule "Prefer assigning all parts to same employee"
    when
        $tp1 : TaskPart($e1 : employee != null, $task: task)
        $tp2 : TaskPart($e2 : employee != null, $e2 != $e1, task==$task)
    then
        scoreHolder.addSoftConstraintMatch(kcontext, 1, -1);
end


// ############################################################################
// Soft constraints level 2
// ############################################################################

rule "Minimize the number of employees"
    when
        TaskPart ( $e1 : employee != null )
        TaskPart ( $e2 : employee != null , $e1 != $e2)
    then
        scoreHolder.addSoftConstraintMatch(kcontext, 2, -1);
end



