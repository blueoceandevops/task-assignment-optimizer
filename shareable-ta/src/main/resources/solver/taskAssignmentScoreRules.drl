/*
 * Copyright 2010 Red Hat, Inc. and/or its affiliates.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package solver;

dialect "java"

import org.optaplanner.core.api.score.buildin.bendable.BendableScoreHolder;
import domain.Task;
import domain.TaskPart;
import domain.Employee;

global BendableScoreHolder scoreHolder;

// ############################################################################
// Hard constraints
// ############################################################################

rule "Same employee - Keep parts together"
    when
        $other : TaskPart($e : employee != null, $task: task)
        $taskPart : TaskPart(employee == $e, $other != this, task==$task, previousTaskPartOrEmployee != $other)
    then
    	// if the other part is neither the previous nor the next 
    	if ( $taskPart.getNextTaskPart() != $other )
        	scoreHolder.addHardConstraintMatch(kcontext, 0, -1 );
end

rule "Skill requirements"
    when
        TaskPart(employee != null, missingSkillCount > 0, $missingSkillCount : missingSkillCount)
    then
        scoreHolder.addHardConstraintMatch(kcontext, 1, - $missingSkillCount);
end

rule "High priority task must be accomplished on time"
    when
        TaskPart(employee != null, task.priority == 1, $outOfTime : outOfTime)
    then
        scoreHolder.addHardConstraintMatch(kcontext, 2, $outOfTime);
end


// ############################################################################
// Soft constraints level 1 - near 0
// ############################################################################

rule "Different employees - Keep parts aligned"
    when
        TaskPart($e1 : employee != null, $task: task, $startTime: startTime)
        TaskPart($e2 : employee != null, $e2 != $e1, task==$task, startTime != $startTime)
    then
        scoreHolder.addSoftConstraintMatch(kcontext, 0, -1 );
end

rule "Meet complention time for other priorities"
when
        TaskPart(employee != null, $priority : task.priority  > 1 , $outOfTime : outOfTime)
    then
        scoreHolder.addSoftConstraintMatch(kcontext, 0, $outOfTime );
end

// ############################################################################
// Soft constraints level 2
// ############################################################################

					
rule "Priority order (max priority is 6)"
    when
        TaskPart(employee != null, $priority : task.priority , $outOfTime : outOfTime)
    then
    	int priorityFactor = (int) Math.pow(10, (7-$priority)) * $outOfTime/15;
        scoreHolder.addSoftConstraintMatch(kcontext, 1, priorityFactor );
end

// ############################################################################
// Soft constraints level 3
// ############################################################################


rule "Minimize the number of employees"
    when
        TaskPart ( $e1 : employee != null )
        TaskPart ( $e2 : employee != null , $e1 != $e2)
    then
        scoreHolder.addSoftConstraintMatch(kcontext, 2, -1);
end
